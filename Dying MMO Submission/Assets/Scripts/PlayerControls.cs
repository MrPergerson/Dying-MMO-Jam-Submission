//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""bcfb7440-1680-4bbb-b0cc-966bc38c7303"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""beec9c2d-fe7c-46f5-b3ce-66b0cdd07121"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPrimaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""90ee36f9-e072-4274-9a0c-889f7ab6f9e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorSecondaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""0645c6a5-3d8f-4e7f-84e4-021f9a91fdb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7af307ac-1151-499c-9848-730492327b27"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e321cf7-fb3a-4d8c-867c-bb6e8b76c596"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""CursorPrimaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31c2e27d-a7da-42d2-846b-ea09a9da867e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""CursorSecondaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_CursorPosition = m_Main.FindAction("CursorPosition", throwIfNotFound: true);
        m_Main_CursorPrimaryClick = m_Main.FindAction("CursorPrimaryClick", throwIfNotFound: true);
        m_Main_CursorSecondaryClick = m_Main.FindAction("CursorSecondaryClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_CursorPosition;
    private readonly InputAction m_Main_CursorPrimaryClick;
    private readonly InputAction m_Main_CursorSecondaryClick;
    public struct MainActions
    {
        private @PlayerControls m_Wrapper;
        public MainActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorPosition => m_Wrapper.m_Main_CursorPosition;
        public InputAction @CursorPrimaryClick => m_Wrapper.m_Main_CursorPrimaryClick;
        public InputAction @CursorSecondaryClick => m_Wrapper.m_Main_CursorSecondaryClick;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @CursorPosition.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPosition;
                @CursorPrimaryClick.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPrimaryClick;
                @CursorPrimaryClick.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPrimaryClick;
                @CursorPrimaryClick.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorPrimaryClick;
                @CursorSecondaryClick.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorSecondaryClick;
                @CursorSecondaryClick.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorSecondaryClick;
                @CursorSecondaryClick.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCursorSecondaryClick;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @CursorPrimaryClick.started += instance.OnCursorPrimaryClick;
                @CursorPrimaryClick.performed += instance.OnCursorPrimaryClick;
                @CursorPrimaryClick.canceled += instance.OnCursorPrimaryClick;
                @CursorSecondaryClick.started += instance.OnCursorSecondaryClick;
                @CursorSecondaryClick.performed += instance.OnCursorSecondaryClick;
                @CursorSecondaryClick.canceled += instance.OnCursorSecondaryClick;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnCursorPrimaryClick(InputAction.CallbackContext context);
        void OnCursorSecondaryClick(InputAction.CallbackContext context);
    }
}
